#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Utility for managing fail safe boot."
		echo "Usage: ${script_name} [flags]"
		echo "Option flags:"
		echo "  -c --fsb-counter - Set fsb-counter value. Default='${fsb_counter}'."
		echo "  -m --fsb-map     - Set fsb-map value. Default='${fsb_map}'."
		echo "  -i --fsb-index   - Set fsb-index value. Default='${fsb_index}'."
		echo "  -n --efi-next    - Set EFI BootNext value. Default='${efi_next}'."
		echo "  -p --print       - Print current variable values."
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution."
		echo "  -g --debug       - Extra verbose execution."
		echo "  -d --dry-run     - Dry run, don't modify variables."
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="c:m:i:n:phvgd"
	local long_opts="fsb-counter:,fsb-map:,fsb-index:,efi-next:,print,help,verbose,debug,dry-run"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-c | --fsb-counter)
			fsb_counter="${2}"
			shift 2
			;;
		-m | --fsb-map)
			fsb_map="${2}"
			shift 2
			;;
		-i | --fsb-index)
			fsb_index="${2}"
			shift 2
			;;
		-n | --efi-next)
			efi_next="${2}"
			shift 2
			;;
		-p | --print)
			print=1
			shift
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		-d | --dry-run)
			dry_run=1
			shift
			;;
		--)
			shift
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/fsb-lib.sh"

fsb_counter=''
fsb_map=''
fsb_index=''
efi_next=''
print=''
usage=''
verbose=''
debug=''
dry_run=''

process_opts "${@}"

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

print_project_banner >&2

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

hexdump="${hexdump:-hexdump}"

if ! check_prog "${hexdump}"; then
	exit 1
fi

#===============================================================================

# test_1
# test_2

op_code="${fsb_counter}${fsb_map}${fsb_index}${efi_next}"

if [[ ! ${op_code} ]]; then
	print=1
fi

if [[ ${print} ]]; then
	dump_vars '--- Current ---'
	trap "on_exit 'Success'" EXIT
	exit 0
fi

if [[ ${verbose} ]]; then
	dump_vars '--- Before ---'
fi

if [[ ${fsb_counter} ]]; then
	set_var_16 "${fsb_vendor_id}" "fsb-counter" "${fsb_counter}"
fi

if [[ ${fsb_map} ]]; then
	set_var_32 "${fsb_vendor_id}" "fsb-map" "${fsb_map}"
fi

if [[ ${fsb_index} ]]; then
	set_var_16 "${fsb_vendor_id}" "fsb-index" "${fsb_index}"
fi

if [[ ${efi_next} ]]; then
	set_var_16 "${efi_vendor_id}" "BootNext" "${efi_next}"
fi

if [[ ${verbose} ]]; then
	echo
	dump_vars '--- After ---'
fi

trap "on_exit 'Success'" EXIT
exit 0
